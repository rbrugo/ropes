/**
 * @author      : rbrugo (brugo.riccardo@gmail.com)
 * @file        : element_wise
 * @created     : Wednesday Oct 30, 2024 21:24:30 CET
 * @description : implementation of a wrapper around a vector to perform element-wise operations
 * @license     :
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 * */

#ifndef MATH_VECTOR_ELEMENT_WISE_HPP
#define MATH_VECTOR_ELEMENT_WISE_HPP

#include "vector.hpp"
#include <utility>

namespace math
{

template <std::size_t N>
constexpr auto negate(vector<bool, N> v) noexcept
    -> vector<bool, N> {
    for (auto & elem : v) { elem = not elem; }
    return v;
}

// template <typename> struct is_vector : std::false_type {};
// template <typename T, std::size_t N> struct is_vector<math::vector<T, N>> : std::true_type {};

namespace detail {
    template <typename>
    constexpr inline auto is_vector = false;
    template <typename T, std::size_t N>
    constexpr inline auto is_vector<math::vector<T, N>> = true;
}  // namespace detail

template <typename Vector>
    requires detail::is_vector<std::remove_cvref_t<Vector>>
class element_wise
{
    using vector_type = std::remove_reference_t<Vector>;
    using value_type = typename vector_type::value_type;
    constexpr static auto size = vector_type::size();
    constexpr static auto is_const = std::is_const_v<vector_type>;

    vector_type * _underlying;

public:
    explicit constexpr element_wise(vector_type & v) noexcept : _underlying(std::addressof(v)) {}

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
    //                         Arithmetic operators                         //
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
    template <typename U>
    friend constexpr auto operator+=(element_wise & lhs, vector<U, size> const & rhs)
        -> math::vector<value_type, size> &
    { return lhs._underlying += rhs; }
                                                                     //
    template <typename U>
    friend constexpr auto operator+(element_wise const & lhs, vector<U, size> const & rhs)
        -> math::vector<value_type, size> &
    { return lhs._underlying + rhs; }

    template <typename U>
    friend constexpr auto operator-=(element_wise & lhs, vector<U, size> const & rhs)
        -> math::vector<value_type, size> &
    { return lhs._underlying -= rhs; }

    template <typename U>
    friend constexpr auto operator-(element_wise const & lhs, vector<U, size> const & rhs)
        -> math::vector<value_type, size> &
    { return lhs._underlying - rhs; }

    template <typename U>
        requires requires(value_type & t, U const & u) { { t *= u } -> std::convertible_to<value_type>; }
    friend constexpr auto operator*=(element_wise & lhs, math::vector<U, size> const & rhs)
        -> math::vector<value_type, size> &
    {
        for (auto i = 0uz; i < size; ++i) {
            lhs[i] *= rhs[i];
        }
        return lhs;
    }

    template <typename U>
    friend constexpr auto operator*(element_wise const & lhs, math::vector<U, size> const & rhs)
        -> math::vector<value_type, size>
    {
        auto copy = auto{lhs._underlying};
        static_assert(not std::is_const_v<decltype(copy)>);
        return element_wise{copy} *= rhs;
    }

    template <typename U>
        requires requires(value_type & t, U const & u) { { t /= u } -> std::convertible_to<value_type>; }
    friend constexpr auto operator/=(element_wise & lhs, math::vector<U, size> const & rhs)
        -> math::vector<value_type, size> &
    {
        for (auto i = 0uz; i < size; ++i) {
            lhs[i] /= rhs[i];
        }
        return lhs;
    }

    template <typename U>
    friend constexpr auto operator/(element_wise const & lhs, math::vector<U, size> const & rhs)
        -> math::vector<value_type, size>
    {
        auto copy = auto{lhs._underlying};
        static_assert(not std::is_const_v<decltype(copy)>);
        return element_wise{copy} /= rhs;
    }

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
    //                          Logical operators                           //
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
    template <typename U>
        requires requires(value_type const & t, U const & u) { { t && u }; }
    friend constexpr auto operator &&(element_wise const & lhs, math::vector<U, size> const & rhs)
    {
        return [&]<std::size_t ...I>(std::index_sequence<I...>) {
            return vector{(std::get<I>(*lhs._underlying) && std::get<I>(rhs))...};
        }(std::make_index_sequence<size>());
    }

    template <typename U>
        requires requires(value_type const & t, U const & u) { { t && u }; }
    friend constexpr auto operator ||(element_wise const & lhs, math::vector<U, size> const & rhs)
    {
        return [&]<std::size_t ...I>(std::index_sequence<I...>) {
            return vector{(std::get<I>(*lhs._underlying) && std::get<I>(rhs))...};
        }(std::make_index_sequence<size>());
    }

    friend constexpr auto operator !(element_wise const & t)
    requires requires(value_type const & x) { not x; }
    { return t._underlying.transform([](auto const & x) { return not x; }); }

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
    //                         Comparison operators                         //
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
    template <typename U>
        requires std::equality_comparable_with<value_type, U>
    friend constexpr auto operator==(element_wise const & lhs, math::vector<U, size> const & rhs)
        -> math::vector<bool, size>
    {
        return [&]<std::size_t ...I>(std::index_sequence<I...>) {
            return vector<bool, size>{(std::get<I>(*lhs._underlying) == std::get<I>(rhs))...};
        }(std::make_index_sequence<size>());
    }

    template <typename U>
        requires std::equality_comparable_with<value_type, U>
    friend constexpr auto operator!=(element_wise const & lhs, math::vector<U, size> const & rhs)
        -> math::vector<bool, size>
    {
        return negate(lhs == rhs);
    }

    template <typename U>
        requires requires(value_type const & t, U const & u) { { t < u } -> std::same_as<bool>; }
    friend constexpr auto operator<(element_wise const & lhs, math::vector<U, size> const & rhs)
        -> math::vector<bool, size>
    {
        return [&]<std::size_t ...I>(std::index_sequence<I...>) {
            return vector<bool, size>{(std::get<I>(*lhs._underlying) < std::get<I>(rhs))...};
        }(std::make_index_sequence<size>());
    }

    template <typename U>
        requires requires(value_type const & t, U const & u) { { t > u } -> std::same_as<bool>; }
    friend constexpr auto operator>(element_wise const & lhs, math::vector<U, size> const & rhs)
        -> math::vector<bool, size>
    {
        return [&]<std::size_t ...I>(std::index_sequence<I...>) {
            return vector<bool, size>{(std::get<I>(*lhs._underlying) > std::get<I>(rhs))...};
        }(std::make_index_sequence<size>());
    }

    template <typename U>
        requires requires(value_type const & t, U const & u) { { t > u } -> std::same_as<bool>; }
    friend constexpr auto operator<=(element_wise const & lhs, math::vector<U, size> const & rhs)
        -> math::vector<bool, size>
    {
        return negate(lhs > rhs);
    }

    template <typename U>
        requires requires(value_type const & t, U const & u) { { t < u } -> std::same_as<bool>; }
    friend constexpr auto operator>=(element_wise const & lhs, math::vector<U, size> const & rhs)
        -> math::vector<bool, size>
    {
        return negate(lhs < rhs);
    }
};


template <typename Vector>
    requires (not std::is_rvalue_reference_v<Vector>) and detail::is_vector<std::remove_cvref_t<Vector>>
element_wise(Vector &&) -> element_wise<std::remove_reference_t<Vector>>;

consteval void f() {
    constexpr auto x = vector{1, 2, 3};
    constexpr auto y = vector{3, 2, 1};

    static_assert((element_wise{x} == y) == vector{false, true, false});
    static_assert((element_wise{x} != y) == vector{!false, !true, !false});
    static_assert((element_wise{x} <  y) == vector{true, false, false});
    static_assert((element_wise{x} >  y) == vector{false, false, true});
    static_assert((element_wise{x} <= y) == vector{true, true, false});
    static_assert((element_wise{x} >= y) == vector{false, true, true});
}

} // namespace math

#endif /* MATH_VECTOR_ELEMENT_WISE_HPP */
