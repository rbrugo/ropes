/**
 * @author      : rbrugo (brugo.riccardo@gmail.com)
 * @file        : values
 * @created     : Thursday Sep 12, 2024 18:48:43 CEST
 * @description : implements generic zero and one
 * @license     :
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 * */

#ifndef MATH_VALUES_HPP
#define MATH_VALUES_HPP

#include <concepts>

namespace math
{

namespace detail
{
template <typename T>
consteval auto zero()
{
    if constexpr (requires { { T::zero() } -> std::convertible_to<T>; }) {
        return T::zero();
    } else if constexpr (std::constructible_from<T, double>) {
        return T{0};
    } else if constexpr (std::is_default_constructible<T>::value){
        return T{} - T{};
    } else {
        static_assert(false, "can't find a 'zero' value for type T");
    }
}

template <typename T>
consteval auto one()
{
    if constexpr (requires { { T::one() } -> std::convertible_to<T>; }) {
        return T::one();
    } else if constexpr (std::constructible_from<T, double>) {
        return T{1};
    } else if constexpr (std::is_default_constructible<T>::value and std::convertible_to<T, decltype(T{} / T{})>) {
        return T{} / T{};
    } else {
        static_assert(false, "can't find a 'one' value for type T");
    }
}
}  // namespace detail

constexpr inline struct zero_t
{
    template <typename T>
    explicit consteval operator T() const requires (not std::same_as<T, void>) { return detail::zero<T>(); }
} zero;
constexpr inline struct one_t
{
    template <typename T>
    explicit consteval operator T() const requires (not std::same_as<T, void>) { return detail::one<T>(); }
} one;

#define MATH_DEFINE_OP(op, type) \
template <typename T> \
constexpr auto operator op(T const & t, [[maybe_unused]] type##_t _) { return t op detail::type<T>(); }
#define MATH_DEFINE_OPS_FOR(type) \
MATH_DEFINE_OP(==, type) \
MATH_DEFINE_OP(!=, type) \
MATH_DEFINE_OP(<=, type) \
MATH_DEFINE_OP(<, type)  \
MATH_DEFINE_OP(>=, type) \
MATH_DEFINE_OP(>, type)


MATH_DEFINE_OPS_FOR(zero)
MATH_DEFINE_OPS_FOR(one)

#undef MATH_DEFINE_OPS_FOR
#undef MATH_DEFINE_OP


} // namespace math

#endif /* MATH_VALUES_HPP */
